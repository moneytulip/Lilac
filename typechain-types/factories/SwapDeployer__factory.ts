/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SwapDeployer, SwapDeployerInterface } from "../SwapDeployer";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "cloneAddress",
        type: "address",
      },
    ],
    name: "NewClone",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "swapAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20[]",
        name: "pooledTokens",
        type: "address[]",
      },
    ],
    name: "NewSwapPool",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "clone",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "swapAddress",
        type: "address",
      },
      {
        internalType: "contract IERC20[]",
        name: "_pooledTokens",
        type: "address[]",
      },
      {
        internalType: "uint8[]",
        name: "decimals",
        type: "uint8[]",
      },
      {
        internalType: "string",
        name: "lpTokenName",
        type: "string",
      },
      {
        internalType: "string",
        name: "lpTokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_adminFee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "lpTokenTargetAddress",
        type: "address",
      },
    ],
    name: "deploy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "metaSwapAddress",
        type: "address",
      },
      {
        internalType: "contract IERC20[]",
        name: "_pooledTokens",
        type: "address[]",
      },
      {
        internalType: "uint8[]",
        name: "decimals",
        type: "uint8[]",
      },
      {
        internalType: "string",
        name: "lpTokenName",
        type: "string",
      },
      {
        internalType: "string",
        name: "lpTokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_adminFee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "lpTokenTargetAddress",
        type: "address",
      },
      {
        internalType: "contract ISwap",
        name: "baseSwap",
        type: "address",
      },
    ],
    name: "deployMetaSwap",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610bdf8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630e64a45e14610067578063715018a6146100905780638124b78e1461009a5780638da5cb5b146100ad578063e0ec68b7146100b5578063f2fde38b146100c8575b600080fd5b61007a610075366004610739565b6100db565b6040516100879190610824565b60405180910390f35b6100986101fa565b005b61007a6100a8366004610838565b61023e565b61007a610293565b61007a6100c336600461085c565b6102a2565b6100986100d6366004610838565b6103c4565b6000806100e78b610464565b604051632ca32db760e21b81529091506001600160a01b0382169063b28cb6dc90610124908d908d908d908d908d908d908d908d90600401610a1d565b600060405180830381600087803b15801561013e57600080fd5b505af1158015610152573d6000803e3d6000fd5b50505050806001600160a01b031663f2fde38b61016d610293565b6040518263ffffffff1660e01b81526004016101899190610824565b600060405180830381600087803b1580156101a357600080fd5b505af11580156101b7573d6000803e3d6000fd5b50505050336001600160a01b0316600080516020610b8a833981519152828c6040516101e4929190610a9e565b60405180910390a29a9950505050505050505050565b33610203610293565b6001600160a01b0316146102325760405162461bcd60e51b815260040161022990610aca565b60405180910390fd5b61023c6000610475565b565b60008061024a83610464565b9050826001600160a01b03167f3bf919a220a0f12ddcaf77fd06ffa4b9c728617774936f0d78b452010319c824826040516102859190610824565b60405180910390a292915050565b6000546001600160a01b031690565b6000806102ae8c610464565b60405163118e1c7760e01b81529091506001600160a01b0382169063118e1c77906102ed908e908e908e908e908e908e908e908e908e90600401610aff565b600060405180830381600087803b15801561030757600080fd5b505af115801561031b573d6000803e3d6000fd5b50505050806001600160a01b031663f2fde38b610336610293565b6040518263ffffffff1660e01b81526004016103529190610824565b600060405180830381600087803b15801561036c57600080fd5b505af1158015610380573d6000803e3d6000fd5b50505050336001600160a01b0316600080516020610b8a833981519152828d6040516103ad929190610a9e565b60405180910390a29b9a5050505050505050505050565b336103cd610293565b6001600160a01b0316146103f35760405162461bcd60e51b815260040161022990610aca565b6001600160a01b0381166104585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610229565b61046181610475565b50565b600061046f826104c5565b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661055d5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610229565b919050565b6001600160a01b038116811461046157600080fd5b803561055d81610562565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156105c0576105c0610582565b604052919050565b60006001600160401b038211156105e1576105e1610582565b5060051b60200190565b600082601f8301126105fc57600080fd5b8135602061061161060c836105c8565b610598565b82815260059290921b8401810191818101908684111561063057600080fd5b8286015b8481101561065457803561064781610562565b8352918301918301610634565b509695505050505050565b600082601f83011261067057600080fd5b8135602061068061060c836105c8565b82815260059290921b8401810191818101908684111561069f57600080fd5b8286015b8481101561065457803560ff811681146106bd5760008081fd5b83529183019183016106a3565b600082601f8301126106db57600080fd5b81356001600160401b038111156106f4576106f4610582565b610707601f8201601f1916602001610598565b81815284602083860101111561071c57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060008060006101208a8c03121561075857600080fd5b6107618a610577565b985060208a01356001600160401b038082111561077d57600080fd5b6107898d838e016105eb565b995060408c013591508082111561079f57600080fd5b6107ab8d838e0161065f565b985060608c01359150808211156107c157600080fd5b6107cd8d838e016106ca565b975060808c01359150808211156107e357600080fd5b506107f08c828d016106ca565b95505060a08a0135935060c08a0135925060e08a013591506108156101008b01610577565b90509295985092959850929598565b6001600160a01b0391909116815260200190565b60006020828403121561084a57600080fd5b813561085581610562565b9392505050565b6000806000806000806000806000806101408b8d03121561087c57600080fd5b6108858b610577565b995060208b01356001600160401b03808211156108a157600080fd5b6108ad8e838f016105eb565b9a5060408d01359150808211156108c357600080fd5b6108cf8e838f0161065f565b995060608d01359150808211156108e557600080fd5b6108f18e838f016106ca565b985060808d013591508082111561090757600080fd5b506109148d828e016106ca565b96505060a08b0135945060c08b0135935060e08b013592506109396101008c01610577565b91506109486101208c01610577565b90509295989b9194979a5092959850565b600081518084526020808501945080840160005b838110156109925781516001600160a01b03168752958201959082019060010161096d565b509495945050505050565b600081518084526020808501945080840160005b8381101561099257815160ff16875295820195908201906001016109b1565b6000815180845260005b818110156109f6576020818501810151868301820152016109da565b81811115610a08576000602083870101525b50601f01601f19169290920160200192915050565b6000610100808352610a318184018c610959565b90508281036020840152610a45818b61099d565b90508281036040840152610a59818a6109d0565b90508281036060840152610a6d81896109d0565b6080840197909752505060a081019390935260c08301919091526001600160a01b031660e090910152949350505050565b6001600160a01b0383168152604060208201819052600090610ac290830184610959565b949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000610120808352610b138184018d610959565b90508281036020840152610b27818c61099d565b90508281036040840152610b3b818b6109d0565b90508281036060840152610b4f818a6109d0565b6080840198909852505060a081019490945260c08401929092526001600160a01b0390811660e0840152166101009091015294935050505056fe0838512b7934222cec571cf3fde1cf3e9e864bbc431bd5d1ef4d9ed3079093d9a2646970667358221220a8e20b0ac697f236c735c62e2b2e631bda951d7cc1893a7eb668b093fddecf1e64736f6c63430008090033";

type SwapDeployerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapDeployerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapDeployer__factory extends ContractFactory {
  constructor(...args: SwapDeployerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SwapDeployer";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SwapDeployer> {
    return super.deploy(overrides || {}) as Promise<SwapDeployer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SwapDeployer {
    return super.attach(address) as SwapDeployer;
  }
  connect(signer: Signer): SwapDeployer__factory {
    return super.connect(signer) as SwapDeployer__factory;
  }
  static readonly contractName: "SwapDeployer";
  public readonly contractName: "SwapDeployer";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapDeployerInterface {
    return new utils.Interface(_abi) as SwapDeployerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapDeployer {
    return new Contract(address, _abi, signerOrProvider) as SwapDeployer;
  }
}

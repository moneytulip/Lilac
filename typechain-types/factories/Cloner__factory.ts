/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Cloner, ClonerInterface } from "../Cloner";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "clone",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610177806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638124b78e14610030575b600080fd5b61004361003e366004610111565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b600061006a82610070565b92915050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661010c5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b60006020828403121561012357600080fd5b81356001600160a01b038116811461013a57600080fd5b939250505056fea26469706673582212200d688d929128f783cf72e7c1ed350750cbf9f65895605b22ace34de2b9605e1664736f6c63430008090033";

type ClonerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClonerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cloner__factory extends ContractFactory {
  constructor(...args: ClonerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Cloner";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Cloner> {
    return super.deploy(overrides || {}) as Promise<Cloner>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Cloner {
    return super.attach(address) as Cloner;
  }
  connect(signer: Signer): Cloner__factory {
    return super.connect(signer) as Cloner__factory;
  }
  static readonly contractName: "Cloner";
  public readonly contractName: "Cloner";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClonerInterface {
    return new utils.Interface(_abi) as ClonerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Cloner {
    return new Contract(address, _abi, signerOrProvider) as Cloner;
  }
}

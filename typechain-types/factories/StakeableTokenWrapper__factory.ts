/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakeableTokenWrapper,
  StakeableTokenWrapperInterface,
} from "../StakeableTokenWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_stakedToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakedToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161074f38038061074f83398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6106bc806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806318160ddd1461005c5780632e1a7d4d1461007857806370a082311461008d578063a694fc3a146100b6578063cc7a262e146100c9575b600080fd5b61006560005481565b6040519081526020015b60405180910390f35b61008b610086366004610562565b6100f4565b005b61006561009b36600461057b565b6001600160a01b031660009081526002602052604090205490565b61008b6100c4366004610562565b610182565b6001546100dc906001600160a01b031681565b6040516001600160a01b03909116815260200161006f565b600054610101908261024a565b60009081553381526002602052604090205461011d908261024a565b33600081815260026020526040902091909155600154610149916001600160a01b03909116908361025d565b60405181815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250565b806101c25760405162461bcd60e51b815260206004820152600b60248201526a0616d6f756e74203d3d20360ac1b60448201526064015b60405180910390fd5b6000546101cf90826102c5565b6000908155338152600260205260409020546101eb90826102c5565b33600081815260026020526040902091909155600154610218916001600160a01b039091169030846102d1565b60405181815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90602001610177565b600061025682846105ba565b9392505050565b6040516001600160a01b0383166024820152604481018290526102c090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261030f565b505050565b600061025682846105d1565b6040516001600160a01b03808516602483015283166044820152606481018290526103099085906323b872dd60e01b90608401610289565b50505050565b6000610364826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166103e19092919063ffffffff16565b8051909150156102c0578080602001905181019061038291906105e9565b6102c05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101b9565b60606103f084846000856103f8565b949350505050565b6060824710156104595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101b9565b6001600160a01b0385163b6104b05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101b9565b600080866001600160a01b031685876040516104cc9190610637565b60006040518083038185875af1925050503d8060008114610509576040519150601f19603f3d011682016040523d82523d6000602084013e61050e565b606091505b509150915061051e828286610529565b979650505050505050565b60608315610538575081610256565b8251156105485782518084602001fd5b8160405162461bcd60e51b81526004016101b99190610653565b60006020828403121561057457600080fd5b5035919050565b60006020828403121561058d57600080fd5b81356001600160a01b038116811461025657600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156105cc576105cc6105a4565b500390565b600082198211156105e4576105e46105a4565b500190565b6000602082840312156105fb57600080fd5b8151801515811461025657600080fd5b60005b8381101561062657818101518382015260200161060e565b838111156103095750506000910152565b6000825161064981846020870161060b565b9190910192915050565b602081526000825180602084015261067281604085016020870161060b565b601f01601f1916919091016040019291505056fea26469706673582212204fbc2d5852f48b02bdc94585056cb6ab693136b16ba4a04387b572aac4fdc86a64736f6c63430008090033";

type StakeableTokenWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeableTokenWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakeableTokenWrapper__factory extends ContractFactory {
  constructor(...args: StakeableTokenWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "StakeableTokenWrapper";
  }

  deploy(
    _stakedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakeableTokenWrapper> {
    return super.deploy(
      _stakedToken,
      overrides || {}
    ) as Promise<StakeableTokenWrapper>;
  }
  getDeployTransaction(
    _stakedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_stakedToken, overrides || {});
  }
  attach(address: string): StakeableTokenWrapper {
    return super.attach(address) as StakeableTokenWrapper;
  }
  connect(signer: Signer): StakeableTokenWrapper__factory {
    return super.connect(signer) as StakeableTokenWrapper__factory;
  }
  static readonly contractName: "StakeableTokenWrapper";
  public readonly contractName: "StakeableTokenWrapper";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeableTokenWrapperInterface {
    return new utils.Interface(_abi) as StakeableTokenWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakeableTokenWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StakeableTokenWrapper;
  }
}

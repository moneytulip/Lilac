/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ProtocolFeesCollector,
  ProtocolFeesCollectorInterface,
} from "../ProtocolFeesCollector";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVault",
        name: "_vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newFlashLoanFeePercentage",
        type: "uint256",
      },
    ],
    name: "FlashLoanFeePercentageChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newSwapFeePercentage",
        type: "uint256",
      },
    ],
    name: "SwapFeePercentageChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getActionId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuthorizer",
    outputs: [
      {
        internalType: "contract IAuthorizer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "getCollectedFeeAmounts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "feeAmounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFlashLoanFeePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSwapFeePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newFlashLoanFeePercentage",
        type: "uint256",
      },
    ],
    name: "setFlashLoanFeePercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newSwapFeePercentage",
        type: "uint256",
      },
    ],
    name: "setSwapFeePercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "withdrawCollectedFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610d76380380610d7683398101604081905261002f91610049565b3060805260016000556001600160a01b031660a052610079565b60006020828403121561005b57600080fd5b81516001600160a01b038116811461007257600080fd5b9392505050565b60805160a051610cd16100a56000396000818161012f0152610532015260006102fc0152610cd16000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c806338e9922e1461008857806355c676281461009d5780636b6b9f69146100b45780636daefab6146100c7578063851c1bb3146100da578063aaabadc5146100ed578063d877845c14610102578063e42abf351461010a578063fbfa77cf1461012a575b600080fd5b61009b610096366004610900565b610151565b005b6001545b6040519081526020015b60405180910390f35b61009b6100c2366004610900565b6101ac565b61009b6100d5366004610979565b6101ff565b6100a16100e83660046109fc565b6102f8565b6100f561035d565b6040516100ab9190610a26565b6002546100a1565b61011d610118366004610a60565b61036c565b6040516100ab9190610b24565b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b610159610487565b6101706706f05b59d3b200008211156102586104b8565b60018190556040518181527fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc906020015b60405180910390a150565b6101b4610487565b6101ca662386f26fc100008211156102596104b8565b60028190556040518181527f5a0b7386237e7f07fa741efc64e59c9387d2cccafec760efed4d53387f20e19a906020016101a1565b600260005414156102575760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055610264610487565b61026e84836104ca565b60005b848110156102eb57600086868381811061028d5761028d610b68565b90506020020160208101906102a29190610b7e565b905060008585848181106102b8576102b8610b68565b602002919091013591506102d890506001600160a01b03831685836104d7565b5050806102e490610b9b565b9050610271565b5050600160005550505050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016103409291909182526001600160e01b031916602082015260240190565b604051602081830303815290604052805190602001209050919050565b600061036761052e565b905090565b606081516001600160401b0381111561038757610387610a3a565b6040519080825280602002602001820160405280156103b0578160200160208202803683370190505b50905060005b8251811015610481578281815181106103d1576103d1610b68565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016104049190610a26565b60206040518083038186803b15801561041c57600080fd5b505afa158015610430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104549190610bc4565b82828151811061046657610466610b68565b602090810291909101015261047a81610b9b565b90506103b6565b50919050565b600061049e6000356001600160e01b0319166102f8565b90506104b56104ad82336105c1565b6101916104b8565b50565b816104c6576104c68161065a565b5050565b6104c681831460676104b8565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526105299084906106ad565b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b15801561058957600080fd5b505afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103679190610bdd565b60006105cb61052e565b6040516326f8aa2160e21b8152600481018590526001600160a01b0384811660248301523060448301529190911690639be2a8849060640160206040518083038186803b15801561061b57600080fd5b505afa15801561062f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106539190610bfa565b9392505050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6000610702826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661077f9092919063ffffffff16565b80519091501561052957808060200190518101906107209190610bfa565b6105295760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161024e565b606061078e8484600085610796565b949350505050565b6060824710156107f75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161024e565b6001600160a01b0385163b61084e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161024e565b600080866001600160a01b0316858760405161086a9190610c4c565b60006040518083038185875af1925050503d80600081146108a7576040519150601f19603f3d011682016040523d82523d6000602084013e6108ac565b606091505b50915091506108bc8282866108c7565b979650505050505050565b606083156108d6575081610653565b8251156108e65782518084602001fd5b8160405162461bcd60e51b815260040161024e9190610c68565b60006020828403121561091257600080fd5b5035919050565b60008083601f84011261092b57600080fd5b5081356001600160401b0381111561094257600080fd5b6020830191508360208260051b850101111561095d57600080fd5b9250929050565b6001600160a01b03811681146104b557600080fd5b60008060008060006060868803121561099157600080fd5b85356001600160401b03808211156109a857600080fd5b6109b489838a01610919565b909750955060208801359150808211156109cd57600080fd5b506109da88828901610919565b90945092505060408601356109ee81610964565b809150509295509295909350565b600060208284031215610a0e57600080fd5b81356001600160e01b03198116811461065357600080fd5b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b8035610a5b81610964565b919050565b60006020808385031215610a7357600080fd5b82356001600160401b0380821115610a8a57600080fd5b818501915085601f830112610a9e57600080fd5b813581811115610ab057610ab0610a3a565b8060051b604051601f19603f83011681018181108582111715610ad557610ad5610a3a565b604052918252848201925083810185019188831115610af357600080fd5b938501935b82851015610b1857610b0985610a50565b84529385019392850192610af8565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610b5c57835183529284019291840191600101610b40565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610b9057600080fd5b813561065381610964565b6000600019821415610bbd57634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215610bd657600080fd5b5051919050565b600060208284031215610bef57600080fd5b815161065381610964565b600060208284031215610c0c57600080fd5b8151801515811461065357600080fd5b60005b83811015610c37578181015183820152602001610c1f565b83811115610c46576000848401525b50505050565b60008251610c5e818460208701610c1c565b9190910192915050565b6020815260008251806020840152610c87816040850160208701610c1c565b601f01601f1916919091016040019291505056fea2646970667358221220f8e72beae42153061f2b22ef5eab9e368377321717a9448b4344ef68682d129564736f6c63430008090033";

type ProtocolFeesCollectorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProtocolFeesCollectorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProtocolFeesCollector__factory extends ContractFactory {
  constructor(...args: ProtocolFeesCollectorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ProtocolFeesCollector";
  }

  deploy(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ProtocolFeesCollector> {
    return super.deploy(
      _vault,
      overrides || {}
    ) as Promise<ProtocolFeesCollector>;
  }
  getDeployTransaction(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vault, overrides || {});
  }
  attach(address: string): ProtocolFeesCollector {
    return super.attach(address) as ProtocolFeesCollector;
  }
  connect(signer: Signer): ProtocolFeesCollector__factory {
    return super.connect(signer) as ProtocolFeesCollector__factory;
  }
  static readonly contractName: "ProtocolFeesCollector";
  public readonly contractName: "ProtocolFeesCollector";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProtocolFeesCollectorInterface {
    return new utils.Interface(_abi) as ProtocolFeesCollectorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProtocolFeesCollector {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ProtocolFeesCollector;
  }
}

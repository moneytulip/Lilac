/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace GeneralizedSwapMigrator {
  export type MigrationDataStruct = {
    newPoolAddress: string;
    oldPoolLPTokenAddress: string;
    newPoolLPTokenAddress: string;
    tokens: string[];
  };

  export type MigrationDataStructOutput = [string, string, string, string[]] & {
    newPoolAddress: string;
    oldPoolLPTokenAddress: string;
    newPoolLPTokenAddress: string;
    tokens: string[];
  };
}

export interface GeneralizedSwapMigratorInterface extends utils.Interface {
  contractName: "GeneralizedSwapMigrator";
  functions: {
    "addMigrationData(address,(address,address,address,address[]),bool)": FunctionFragment;
    "batch(bytes[],bool)": FunctionFragment;
    "migrate(address,uint256,uint256)": FunctionFragment;
    "migrationMap(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescue(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMigrationData",
    values: [string, GeneralizedSwapMigrator.MigrationDataStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrationMap",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescue",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMigrationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrationMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddMigrationData(address,tuple)": EventFragment;
    "Migrate(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddMigrationData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AddMigrationDataEvent = TypedEvent<
  [string, GeneralizedSwapMigrator.MigrationDataStructOutput],
  {
    oldPoolAddress: string;
    mData: GeneralizedSwapMigrator.MigrationDataStructOutput;
  }
>;

export type AddMigrationDataEventFilter =
  TypedEventFilter<AddMigrationDataEvent>;

export type MigrateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    migrator: string;
    oldPoolAddress: string;
    oldLPTokenAmount: BigNumber;
    newLPTokenAmount: BigNumber;
  }
>;

export type MigrateEventFilter = TypedEventFilter<MigrateEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface GeneralizedSwapMigrator extends BaseContract {
  contractName: "GeneralizedSwapMigrator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GeneralizedSwapMigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMigrationData(
      oldPoolAddress: string,
      mData: GeneralizedSwapMigrator.MigrationDataStruct,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrate(
      oldPoolAddress: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrationMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        newPoolAddress: string;
        oldPoolLPTokenAddress: string;
        newPoolLPTokenAddress: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescue(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMigrationData(
    oldPoolAddress: string,
    mData: GeneralizedSwapMigrator.MigrationDataStruct,
    overwrite: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batch(
    calls: BytesLike[],
    revertOnFail: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrate(
    oldPoolAddress: string,
    amount: BigNumberish,
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrationMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      newPoolAddress: string;
      oldPoolLPTokenAddress: string;
      newPoolLPTokenAddress: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescue(
    token: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMigrationData(
      oldPoolAddress: string,
      mData: GeneralizedSwapMigrator.MigrationDataStruct,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    migrate(
      oldPoolAddress: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrationMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        newPoolAddress: string;
        oldPoolLPTokenAddress: string;
        newPoolLPTokenAddress: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescue(token: string, to: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddMigrationData(address,tuple)"(
      oldPoolAddress?: string | null,
      mData?: null
    ): AddMigrationDataEventFilter;
    AddMigrationData(
      oldPoolAddress?: string | null,
      mData?: null
    ): AddMigrationDataEventFilter;

    "Migrate(address,address,uint256,uint256)"(
      migrator?: string | null,
      oldPoolAddress?: string | null,
      oldLPTokenAmount?: null,
      newLPTokenAmount?: null
    ): MigrateEventFilter;
    Migrate(
      migrator?: string | null,
      oldPoolAddress?: string | null,
      oldLPTokenAmount?: null,
      newLPTokenAmount?: null
    ): MigrateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addMigrationData(
      oldPoolAddress: string,
      mData: GeneralizedSwapMigrator.MigrationDataStruct,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrate(
      oldPoolAddress: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrationMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescue(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMigrationData(
      oldPoolAddress: string,
      mData: GeneralizedSwapMigrator.MigrationDataStruct,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      oldPoolAddress: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrationMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescue(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

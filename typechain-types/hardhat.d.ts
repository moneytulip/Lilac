/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Votes__factory>;
    getContractFactory(
      name: "ERC20VotesComp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20VotesComp__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AmplificationUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AmplificationUtils__factory>;
    getContractFactory(
      name: "GeneralizedSwapMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GeneralizedSwapMigrator__factory>;
    getContractFactory(
      name: "Allowlist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Allowlist__factory>;
    getContractFactory(
      name: "LPTokenGuarded",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPTokenGuarded__factory>;
    getContractFactory(
      name: "OwnerPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerPausable__factory>;
    getContractFactory(
      name: "SwapGuarded",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapGuarded__factory>;
    getContractFactory(
      name: "SwapUtilsGuarded",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapUtilsGuarded__factory>;
    getContractFactory(
      name: "BaseBoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseBoringBatchable__factory>;
    getContractFactory(
      name: "Cloner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cloner__factory>;
    getContractFactory(
      name: "IAllowlist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAllowlist__factory>;
    getContractFactory(
      name: "IFlashLoanReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanReceiver__factory>;
    getContractFactory(
      name: "IMetaSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaSwap__factory>;
    getContractFactory(
      name: "ISwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwap__factory>;
    getContractFactory(
      name: "ISwapGuarded",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapGuarded__factory>;
    getContractFactory(
      name: "LLC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LLC__factory>;
    getContractFactory(
      name: "LPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPToken__factory>;
    getContractFactory(
      name: "MetaSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaSwap__factory>;
    getContractFactory(
      name: "MetaSwapDeposit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaSwapDeposit__factory>;
    getContractFactory(
      name: "MetaSwapUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaSwapUtils__factory>;
    getContractFactory(
      name: "OwnerPausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerPausableUpgradeable__factory>;
    getContractFactory(
      name: "RetroactiveVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RetroactiveVesting__factory>;
    getContractFactory(
      name: "SimpleGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleGovernance__factory>;
    getContractFactory(
      name: "StakeableTokenWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeableTokenWrapper__factory>;
    getContractFactory(
      name: "Swap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Swap__factory>;
    getContractFactory(
      name: "SwapDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapDeployer__factory>;
    getContractFactory(
      name: "SwapFlashLoan",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapFlashLoan__factory>;
    getContractFactory(
      name: "SwapMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapMigrator__factory>;
    getContractFactory(
      name: "SwapUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapUtils__factory>;
    getContractFactory(
      name: "Vesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vesting__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotes>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Votes>;
    getContractAt(
      name: "ERC20VotesComp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20VotesComp>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AmplificationUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AmplificationUtils>;
    getContractAt(
      name: "GeneralizedSwapMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GeneralizedSwapMigrator>;
    getContractAt(
      name: "Allowlist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Allowlist>;
    getContractAt(
      name: "LPTokenGuarded",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPTokenGuarded>;
    getContractAt(
      name: "OwnerPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerPausable>;
    getContractAt(
      name: "SwapGuarded",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapGuarded>;
    getContractAt(
      name: "SwapUtilsGuarded",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapUtilsGuarded>;
    getContractAt(
      name: "BaseBoringBatchable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseBoringBatchable>;
    getContractAt(
      name: "Cloner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cloner>;
    getContractAt(
      name: "IAllowlist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAllowlist>;
    getContractAt(
      name: "IFlashLoanReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanReceiver>;
    getContractAt(
      name: "IMetaSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaSwap>;
    getContractAt(
      name: "ISwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwap>;
    getContractAt(
      name: "ISwapGuarded",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapGuarded>;
    getContractAt(
      name: "LLC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LLC>;
    getContractAt(
      name: "LPToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPToken>;
    getContractAt(
      name: "MetaSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaSwap>;
    getContractAt(
      name: "MetaSwapDeposit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaSwapDeposit>;
    getContractAt(
      name: "MetaSwapUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaSwapUtils>;
    getContractAt(
      name: "OwnerPausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerPausableUpgradeable>;
    getContractAt(
      name: "RetroactiveVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RetroactiveVesting>;
    getContractAt(
      name: "SimpleGovernance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleGovernance>;
    getContractAt(
      name: "StakeableTokenWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeableTokenWrapper>;
    getContractAt(
      name: "Swap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Swap>;
    getContractAt(
      name: "SwapDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapDeployer>;
    getContractAt(
      name: "SwapFlashLoan",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapFlashLoan>;
    getContractAt(
      name: "SwapMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapMigrator>;
    getContractAt(
      name: "SwapUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapUtils>;
    getContractAt(
      name: "Vesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vesting>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}

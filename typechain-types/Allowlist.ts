/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AllowlistInterface extends utils.Interface {
  contractName: "Allowlist";
  functions: {
    "getPoolAccountLimit(address)": FunctionFragment;
    "getPoolCap(address)": FunctionFragment;
    "isAccountVerified(address)": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPoolAccountLimit(address,uint256)": FunctionFragment;
    "setPoolCap(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMerkleRoot(bytes32)": FunctionFragment;
    "verifyAddress(address,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getPoolAccountLimit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPoolCap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAccountVerified",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolAccountLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolCap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAddress",
    values: [string, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPoolAccountLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAccountVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolAccountLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPoolCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAddress",
    data: BytesLike
  ): Result;

  events: {
    "NewMerkleRoot(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolAccountLimit(address,uint256)": EventFragment;
    "PoolCap(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewMerkleRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAccountLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCap"): EventFragment;
}

export type NewMerkleRootEvent = TypedEvent<[string], { merkleRoot: string }>;

export type NewMerkleRootEventFilter = TypedEventFilter<NewMerkleRootEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PoolAccountLimitEvent = TypedEvent<
  [string, BigNumber],
  { poolAddress: string; accountLimit: BigNumber }
>;

export type PoolAccountLimitEventFilter =
  TypedEventFilter<PoolAccountLimitEvent>;

export type PoolCapEvent = TypedEvent<
  [string, BigNumber],
  { poolAddress: string; poolCap: BigNumber }
>;

export type PoolCapEventFilter = TypedEventFilter<PoolCapEvent>;

export interface Allowlist extends BaseContract {
  contractName: "Allowlist";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AllowlistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPoolAccountLimit(
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolCap(
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAccountVerified(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolAccountLimit(
      poolAddress: string,
      accountLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolCap(
      poolAddress: string,
      poolCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMerkleRoot(
      merkleRoot_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyAddress(
      account: string,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getPoolAccountLimit(
    poolAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolCap(
    poolAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAccountVerified(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolAccountLimit(
    poolAddress: string,
    accountLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolCap(
    poolAddress: string,
    poolCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMerkleRoot(
    merkleRoot_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyAddress(
    account: string,
    merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPoolAccountLimit(
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolCap(
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountVerified(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPoolAccountLimit(
      poolAddress: string,
      accountLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolCap(
      poolAddress: string,
      poolCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMerkleRoot(
      merkleRoot_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyAddress(
      account: string,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewMerkleRoot(bytes32)"(merkleRoot?: null): NewMerkleRootEventFilter;
    NewMerkleRoot(merkleRoot?: null): NewMerkleRootEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PoolAccountLimit(address,uint256)"(
      poolAddress?: string | null,
      accountLimit?: null
    ): PoolAccountLimitEventFilter;
    PoolAccountLimit(
      poolAddress?: string | null,
      accountLimit?: null
    ): PoolAccountLimitEventFilter;

    "PoolCap(address,uint256)"(
      poolAddress?: string | null,
      poolCap?: null
    ): PoolCapEventFilter;
    PoolCap(poolAddress?: string | null, poolCap?: null): PoolCapEventFilter;
  };

  estimateGas: {
    getPoolAccountLimit(
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolCap(
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountVerified(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolAccountLimit(
      poolAddress: string,
      accountLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolCap(
      poolAddress: string,
      poolCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMerkleRoot(
      merkleRoot_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyAddress(
      account: string,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPoolAccountLimit(
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolCap(
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountVerified(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolAccountLimit(
      poolAddress: string,
      accountLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolCap(
      poolAddress: string,
      poolCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMerkleRoot(
      merkleRoot_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyAddress(
      account: string,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

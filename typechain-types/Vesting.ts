/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VestingInterface extends utils.Interface {
  contractName: "Vesting";
  functions: {
    "beneficiary()": FunctionFragment;
    "changeBeneficiary(address)": FunctionFragment;
    "cliffInSeconds()": FunctionFragment;
    "durationInSeconds()": FunctionFragment;
    "governance()": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256)": FunctionFragment;
    "release()": FunctionFragment;
    "released()": FunctionFragment;
    "startTimestamp()": FunctionFragment;
    "token()": FunctionFragment;
    "vestedAmount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cliffInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "durationInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(functionFragment: "released", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vestedAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cliffInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "durationInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestedAmount",
    data: BytesLike
  ): Result;

  events: {
    "Released(uint256)": EventFragment;
    "SetBeneficiary(address)": EventFragment;
    "VestingInitialized(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBeneficiary"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingInitialized"): EventFragment;
}

export type ReleasedEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type ReleasedEventFilter = TypedEventFilter<ReleasedEvent>;

export type SetBeneficiaryEvent = TypedEvent<[string], { beneficiary: string }>;

export type SetBeneficiaryEventFilter = TypedEventFilter<SetBeneficiaryEvent>;

export type VestingInitializedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    beneficiary: string;
    startTimestamp: BigNumber;
    cliff: BigNumber;
    duration: BigNumber;
  }
>;

export type VestingInitializedEventFilter =
  TypedEventFilter<VestingInitializedEvent>;

export interface Vesting extends BaseContract {
  contractName: "Vesting";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    changeBeneficiary(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cliffInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    durationInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _token: string,
      _beneficiary: string,
      _startTimestamp: BigNumberish,
      _cliffInSeconds: BigNumberish,
      _durationInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    released(overrides?: CallOverrides): Promise<[BigNumber]>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    vestedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  beneficiary(overrides?: CallOverrides): Promise<string>;

  changeBeneficiary(
    newBeneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cliffInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  durationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  initialize(
    _token: string,
    _beneficiary: string,
    _startTimestamp: BigNumberish,
    _cliffInSeconds: BigNumberish,
    _durationInSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  release(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  released(overrides?: CallOverrides): Promise<BigNumber>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  vestedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    beneficiary(overrides?: CallOverrides): Promise<string>;

    changeBeneficiary(
      newBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cliffInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    durationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    initialize(
      _token: string,
      _beneficiary: string,
      _startTimestamp: BigNumberish,
      _cliffInSeconds: BigNumberish,
      _durationInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    release(overrides?: CallOverrides): Promise<void>;

    released(overrides?: CallOverrides): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    vestedAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Released(uint256)"(amount?: null): ReleasedEventFilter;
    Released(amount?: null): ReleasedEventFilter;

    "SetBeneficiary(address)"(
      beneficiary?: string | null
    ): SetBeneficiaryEventFilter;
    SetBeneficiary(beneficiary?: string | null): SetBeneficiaryEventFilter;

    "VestingInitialized(address,uint256,uint256,uint256)"(
      beneficiary?: string | null,
      startTimestamp?: null,
      cliff?: null,
      duration?: null
    ): VestingInitializedEventFilter;
    VestingInitialized(
      beneficiary?: string | null,
      startTimestamp?: null,
      cliff?: null,
      duration?: null
    ): VestingInitializedEventFilter;
  };

  estimateGas: {
    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    changeBeneficiary(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cliffInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    durationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _beneficiary: string,
      _startTimestamp: BigNumberish,
      _cliffInSeconds: BigNumberish,
      _durationInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    released(overrides?: CallOverrides): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    vestedAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeBeneficiary(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cliffInSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    durationInSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _beneficiary: string,
      _startTimestamp: BigNumberish,
      _cliffInSeconds: BigNumberish,
      _durationInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    released(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
